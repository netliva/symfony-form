<?phpnamespace Netliva\SymfonyFormBundle\Controller;use Symfony\Bundle\FrameworkBundle\Controller\AbstractController;use Symfony\Component\HttpFoundation\Request;use Symfony\Component\Security\Core\Exception\AccessDeniedException;use Symfony\Component\HttpFoundation\Response;use Symfony\Component\Security\Core\Security;class DependentController extends AbstractController{    public function getOptionsAction(Request $request,  $entity_alias)    {		$entities = $this->get('service_container')->getParameter('netliva_form.dependent_entities');		$entity_inf = $entities[$entity_alias];		$em = $this->get('doctrine')->getManager($entity_inf["em"]);        if ($entity_inf['role'] !== 'IS_AUTHENTICATED_ANONYMOUSLY'){            if (false === $this->isGranted( $entity_inf['role'] )) {                throw new AccessDeniedException();            }        }        // $maxRows = 75;				$dql = 'SELECT a.' . $entity_inf['key'] . '';        foreach ($entity_inf['value'] as $val)		{			if (preg_match("/[a-z]{1}\..*/",$val)) $dql .= ', ' . $val . '' ;			else $dql .= ', a.' . $val . '' ;		}		foreach ($entity_inf['other_values'] as $val)		{			if (preg_match("/[a-z]{1}\..*/",$val)) $dql .= ', ' . $val . '' ;			else $dql .= ', a.' . $val . '' ;		}        $dql .= ' FROM ' . $entity_inf['class'] . ' a ';        if (key_exists('join', $entity_inf))		{			$table_name = 'a';			foreach ($entity_inf['join'] as $join)			{				$table_name++;				$dql .= ' JOIN '.$join.' '.$table_name.' ';			}		}		$dql .= 'WHERE ' .(preg_match("/[a-z]{1}\..*/",$entity_inf['where'])?"":"a."). $entity_inf['where'] . ' = :val ';	 	$dql .= 'ORDER BY '.(preg_match("/[a-z]{1}\..*/",$entity_inf['value'][0])?"":"a.").$entity_inf['value'][0].' ';		$results = $em->createQuery($dql)            ->setParameter('val', $request->request->get("val"))            ->getScalarResult();		$res = "";		if ($entity_inf['static_only_show_with_results'] && count($results) || !$entity_inf['static_only_show_with_results']) // kayıt olup olmamasının kontrolü, bağlı bulunduğu		{			foreach ($entity_inf['static_values'] AS $key => $value){				$res .= '<option value="'.$key.'">'.$value.'</option>';			}		}        foreach ($results AS $r){			$res .= '<option value="'.$r[$entity_inf['key']].'"';			foreach ($entity_inf['other_values'] as $key => $value)			{				if (preg_match("/[a-z]{1}\.(.*)/",$value, $maches))					$value = $maches[1];				$res .= ' data-'.$value.'="'.$r[$value].'"';			}			$res .= '>';			$say = 0;			foreach ($entity_inf['value'] as $key => $value)			{				if (preg_match("/[a-z]{1}\.(.*)/",$value, $maches))					$value = $maches[1];				if($say++) $res .= " - ";				$res .= $r[$value];			}			$res .= '</option>';        }		return new Response(json_encode(["options" => $res, "key_value"=>$request->request->get("val")]));    }}