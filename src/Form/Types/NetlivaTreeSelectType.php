<?phpnamespace Netliva\SymfonyFormBundle\Form\Types;use Doctrine\Common\Collections\ArrayCollection;use Doctrine\ORM\EntityManager;use Doctrine\ORM\EntityManagerInterface;use Symfony\Component\DependencyInjection\Container;use Symfony\Component\DependencyInjection\ContainerInterface;use Symfony\Component\Form\AbstractType;use Symfony\Component\Form\CallbackTransformer;use Symfony\Component\Form\Extension\Core\Type\TextType;use Symfony\Component\Form\FormBuilderInterface;use Symfony\Component\Form\FormInterface;use Symfony\Component\Form\FormView;use Symfony\Component\OptionsResolver\OptionsResolver;class NetlivaTreeSelectType extends AbstractType{	private $container, $em;	/**	 * @param Container $container	 * @param EntityManager $em	 */	public function __construct(ContainerInterface $container, EntityManagerInterface $em)	{		$this->container = $container;		$this->em = $em;	}	public function configureOptions(OptionsResolver $resolver)	{		$resolver->setDefaults(array(		   'entity_alias'  => null,		   'multiselect'   => true,		   'first_deep'    => "null",		   'breakable'     => false,		   'class'         => null,		   'where'         => [],		   'choice_label'  => null,		   'compound'      => false,		   'doctrine_type' => 'relation' // text, json_array, relation	   ));	}	public function getBlockPrefix()	{		return 'netliva_treeselect';	}	public function getParent()	{		return TextType::class;	}	public function buildForm(FormBuilderInterface $builder, array $options)	{		$entities = $this->container->getParameter('netliva_form.treeselect_entities');		$entity_inf = $entities[$options['entity_alias']];		$builder->setAttribute('entity_alias', $options['entity_alias']);		$builder->addViewTransformer(new CallbackTransformer(			function($data) use ($options, $entity_inf) // Veriyi Forma Eklerken			{				if ($options["mapped"] and (is_array($data) or is_object($data)) and count($data))				{					if ($options['multiselect'])					{						if ($options["doctrine_type"] == "relation")						{							$viewData = [];							foreach ($data as $d)							{								$viewData[] = [									"value" => $d->{"get".ucfirst($entity_inf["value"])}(),									"key" => $d->{"get".ucfirst($entity_inf["key"])}(),								];							}							return json_encode($viewData);						}						if ($options["doctrine_type"] == "json_array")							return json_encode($data);						return $data;					}					elseif (is_object($data))					{						if ($options["doctrine_type"] == "relation")							return $data->{"get".ucfirst($entity_inf["key"])}();						return $data;					}				}				return $data;			},			function($data)  use ($options, $entity_inf)  // Veriyi Formdan Alırken			{				return $data;			}		))		->addModelTransformer(new CallbackTransformer(			function($data)  use ($options, $entity_inf)  // DB'den veriyi çekerken			{				return $data;			},			function($data)  use ($options, $entity_inf) // DB'ye Kaydederken			{				if ($options["mapped"] and is_string($data))				{					$dbData = null;					if ($options['multiselect'])					{						if ($options["doctrine_type"] == "text")							return $data;						$data = json_decode($data);						if ($options["doctrine_type"] == "json_array") return $data;						if ($options["doctrine_type"] == "relation")						{							$dbData = new ArrayCollection();							if (is_array($data))							{								foreach ($data as $d)								{									$entity = $this->em->getRepository($entity_inf["class"])->findOneBy([$entity_inf["key"] => $d->key]);									if ($entity)										$dbData->add($entity);								}							}							return $dbData;						}					}					else					{						if ($options["doctrine_type"] == "relation")							return $this->em->getRepository($entity_inf["class"])->findOneBy([$entity_inf["key"] => $data]);						return $data;					}				}				return $data;			}		));	}	public function buildView(FormView $view, FormInterface $form, array $options)	{		$view->vars['entity_alias'] = $form->getConfig()->getAttribute('entity_alias');		$view->vars['breakable']    = $options['breakable'];		$view->vars['multiselect']  = $options['multiselect'];		$view->vars['first_deep']    = $options['first_deep'];		$view->vars['where']        = $options['where'];	}}