<?phpnamespace Netliva\SymfonyFormBundle\Form\Types;use Symfony\Component\Form\AbstractType;use Symfony\Component\Form\CallbackTransformer;use Symfony\Component\Form\Extension\Core\Type\TextType;use Symfony\Component\Form\FormBuilderInterface;use Symfony\Component\Form\FormInterface;use Symfony\Component\Form\FormView;use Symfony\Component\OptionsResolver\OptionsResolver;class NetlivaDatePickerType extends AbstractType{	public function configureOptions(OptionsResolver $resolver): void	{		$resolver->setDefaults(array(			'widget'	  => 'single_text',			'format'	  => 'full',			'compound'	  => false,			'transformer' => true		));	}	public function getBlockPrefix(): string	{		return 'netliva_datepicker';	}	public function getParent()	{		return TextType::class;	}	public function buildForm(FormBuilderInterface $builder, array $options): void	{		if ($options['transformer'])		{			$builder->addModelTransformer(				new CallbackTransformer(					function($data) { return $data; },					function($data) use ($options) {						if ($data && is_string($data)) $data = new \DateTime($data);						elseif (is_array($data) && key_exists("date", $data)) $data = new \DateTime($data["date"]);						else $data = null;						return $data;					}				)			)->addViewTransformer(				new CallbackTransformer(					function($data) use ($options) {						if ($data && is_string($data))							return new \DateTime($data);						if (is_array($data) && key_exists("date",$data))							return new \DateTime($data["date"]);						if(is_object($data) && $data instanceof \DateTime)							return $data;						return null;					},					function($data) { return $data; }				)			);		}	}	public function buildView (FormView $view, FormInterface $form, array $options): void	{		$date = $form->getData();		if ($options['format'] == 'full')		{			$view->vars['db_format'] = "YYYY-MM-DD HH:mm";			$view->vars['view_format'] = "DD MMMM YYYY, dddd - HH:mm";			if ($date && $date instanceof \DateTime) $date = $date->format("Y-m-d H:i");		}		else if ($options['format'] == 'time')		{			$view->vars['db_format'] = "HH:mm";			$view->vars['view_format'] = "HH:mm";			if ($date && $date instanceof \DateTime) $date = $date->format("H:i");		}		else if ($options['format'] == 'date')		{			$view->vars['db_format'] = "YYYY-MM-DD";			$view->vars['view_format'] = "DD MMMM YYYY, dddd";			if ($date && $date instanceof \DateTime) $date = $date->format("Y-m-d");		}		else if ($options['format'] == 'month')		{			$view->vars['db_format'] = "YYYY-MM";			$view->vars['view_format'] = "MMMM YYYY";			if ($date && $date instanceof \DateTime) $date = $date->format("Y-m");		}		else if ($options['format'] == 'year')		{			$view->vars['db_format'] = "YYYY";			$view->vars['view_format'] = "YYYY";			if ($date && $date instanceof \DateTime) $date = $date->format("Y");		}		$view->vars['date'] = $date;	}}