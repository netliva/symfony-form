<?phpnamespace Netliva\SymfonyFormBundle\Form\Types;use Netliva\SymfonyFormBundle\Form\DataTransformer\EntityToIdTransformer;use Symfony\Component\DependencyInjection\ContainerInterface;use Symfony\Component\Form\AbstractType;use Symfony\Component\Form\CallbackTransformer;use Symfony\Component\Form\Extension\Core\Type\TextType;use Symfony\Component\Form\FormBuilderInterface;use Symfony\Component\Form\FormInterface;use Symfony\Component\Form\FormView;use Symfony\Component\OptionsResolver\OptionsResolver;class NetlivaTagsInputType extends AbstractType{	public function configureOptions(OptionsResolver $resolver): void	{	    $resolver->setDefaults(array(		));	}	public function getParent()	{	    return TextType::class;	}	public function buildForm(FormBuilderInterface $builder, array $options): void	{		$builder->addViewTransformer(new CallbackTransformer(			function($data) // Veriyi Forma Eklerken			{				if ((is_array($data) or is_object($data)) and count($data))				{					return implode(',', $data);				}				return $data;			},			function($data)  // Veriyi Formdan Alırken			{				return $data;			}		))		->addModelTransformer(new CallbackTransformer(			function($data)  // DB'den veriyi çekerken			{				return $data;			},			function($data) // DB'ye Kaydederken			{				if (is_string($data))				{					return explode(',', $data);				}				return $data;			}		));	}	public function buildView (FormView $view, FormInterface $form, array $options): void	{	}	public function getBlockPrefix(): string	{	    return 'netliva_tagsinput';	}}